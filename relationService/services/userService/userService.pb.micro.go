// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: userService.proto

package userService

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for UserService service

func NewUserServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for UserService service

type UserService interface {
	Login(ctx context.Context, in *DouyinUserLoginRequest, opts ...client.CallOption) (*DouyinUserLoginResponse, error)
	Register(ctx context.Context, in *DouyinUserRegisterRequest, opts ...client.CallOption) (*DouyinUserRegisterResponse, error)
	UserInfo(ctx context.Context, in *DouyinUserRequest, opts ...client.CallOption) (*DouyinUserResponse, error)
	UpdateFollowCount(ctx context.Context, in *DouyinUpdateFollowCountRequest, opts ...client.CallOption) (*DouyinUpdateFollowCountResponse, error)
	UpdateFollowerCount(ctx context.Context, in *DouyinUpdateFollowerCountRequest, opts ...client.CallOption) (*DouyinUpdateFollowerCountResponse, error)
	UpdateTotalFavorited(ctx context.Context, in *DouyinUpdateTotalFavoritedRequest, opts ...client.CallOption) (*DouyinUpdateTotalFavoritedResponse, error)
	UpdateFavoriteCount(ctx context.Context, in *DouyinUpdateFavoriteCountRequest, opts ...client.CallOption) (*DouyinUpdateFavoriteCountResponse, error)
	UpdateWorkCount(ctx context.Context, in *DouyinUpdateWorkCountRequest, opts ...client.CallOption) (*DouyinUpdateWorkCountResponse, error)
	MultiUserInfo(ctx context.Context, in *DouyinMultiUserInfoRequest, opts ...client.CallOption) (*DouyinMultiUserInfoResponse, error)
}

type userService struct {
	c    client.Client
	name string
}

func NewUserService(name string, c client.Client) UserService {
	return &userService{
		c:    c,
		name: name,
	}
}

func (c *userService) Login(ctx context.Context, in *DouyinUserLoginRequest, opts ...client.CallOption) (*DouyinUserLoginResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.Login", in)
	out := new(DouyinUserLoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) Register(ctx context.Context, in *DouyinUserRegisterRequest, opts ...client.CallOption) (*DouyinUserRegisterResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.Register", in)
	out := new(DouyinUserRegisterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UserInfo(ctx context.Context, in *DouyinUserRequest, opts ...client.CallOption) (*DouyinUserResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.UserInfo", in)
	out := new(DouyinUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UpdateFollowCount(ctx context.Context, in *DouyinUpdateFollowCountRequest, opts ...client.CallOption) (*DouyinUpdateFollowCountResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.UpdateFollowCount", in)
	out := new(DouyinUpdateFollowCountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UpdateFollowerCount(ctx context.Context, in *DouyinUpdateFollowerCountRequest, opts ...client.CallOption) (*DouyinUpdateFollowerCountResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.UpdateFollowerCount", in)
	out := new(DouyinUpdateFollowerCountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UpdateTotalFavorited(ctx context.Context, in *DouyinUpdateTotalFavoritedRequest, opts ...client.CallOption) (*DouyinUpdateTotalFavoritedResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.UpdateTotalFavorited", in)
	out := new(DouyinUpdateTotalFavoritedResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UpdateFavoriteCount(ctx context.Context, in *DouyinUpdateFavoriteCountRequest, opts ...client.CallOption) (*DouyinUpdateFavoriteCountResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.UpdateFavoriteCount", in)
	out := new(DouyinUpdateFavoriteCountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UpdateWorkCount(ctx context.Context, in *DouyinUpdateWorkCountRequest, opts ...client.CallOption) (*DouyinUpdateWorkCountResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.UpdateWorkCount", in)
	out := new(DouyinUpdateWorkCountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) MultiUserInfo(ctx context.Context, in *DouyinMultiUserInfoRequest, opts ...client.CallOption) (*DouyinMultiUserInfoResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.MultiUserInfo", in)
	out := new(DouyinMultiUserInfoResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserService service

type UserServiceHandler interface {
	Login(context.Context, *DouyinUserLoginRequest, *DouyinUserLoginResponse) error
	Register(context.Context, *DouyinUserRegisterRequest, *DouyinUserRegisterResponse) error
	UserInfo(context.Context, *DouyinUserRequest, *DouyinUserResponse) error
	UpdateFollowCount(context.Context, *DouyinUpdateFollowCountRequest, *DouyinUpdateFollowCountResponse) error
	UpdateFollowerCount(context.Context, *DouyinUpdateFollowerCountRequest, *DouyinUpdateFollowerCountResponse) error
	UpdateTotalFavorited(context.Context, *DouyinUpdateTotalFavoritedRequest, *DouyinUpdateTotalFavoritedResponse) error
	UpdateFavoriteCount(context.Context, *DouyinUpdateFavoriteCountRequest, *DouyinUpdateFavoriteCountResponse) error
	UpdateWorkCount(context.Context, *DouyinUpdateWorkCountRequest, *DouyinUpdateWorkCountResponse) error
	MultiUserInfo(context.Context, *DouyinMultiUserInfoRequest, *DouyinMultiUserInfoResponse) error
}

func RegisterUserServiceHandler(s server.Server, hdlr UserServiceHandler, opts ...server.HandlerOption) error {
	type userService interface {
		Login(ctx context.Context, in *DouyinUserLoginRequest, out *DouyinUserLoginResponse) error
		Register(ctx context.Context, in *DouyinUserRegisterRequest, out *DouyinUserRegisterResponse) error
		UserInfo(ctx context.Context, in *DouyinUserRequest, out *DouyinUserResponse) error
		UpdateFollowCount(ctx context.Context, in *DouyinUpdateFollowCountRequest, out *DouyinUpdateFollowCountResponse) error
		UpdateFollowerCount(ctx context.Context, in *DouyinUpdateFollowerCountRequest, out *DouyinUpdateFollowerCountResponse) error
		UpdateTotalFavorited(ctx context.Context, in *DouyinUpdateTotalFavoritedRequest, out *DouyinUpdateTotalFavoritedResponse) error
		UpdateFavoriteCount(ctx context.Context, in *DouyinUpdateFavoriteCountRequest, out *DouyinUpdateFavoriteCountResponse) error
		UpdateWorkCount(ctx context.Context, in *DouyinUpdateWorkCountRequest, out *DouyinUpdateWorkCountResponse) error
		MultiUserInfo(ctx context.Context, in *DouyinMultiUserInfoRequest, out *DouyinMultiUserInfoResponse) error
	}
	type UserService struct {
		userService
	}
	h := &userServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&UserService{h}, opts...))
}

type userServiceHandler struct {
	UserServiceHandler
}

func (h *userServiceHandler) Login(ctx context.Context, in *DouyinUserLoginRequest, out *DouyinUserLoginResponse) error {
	return h.UserServiceHandler.Login(ctx, in, out)
}

func (h *userServiceHandler) Register(ctx context.Context, in *DouyinUserRegisterRequest, out *DouyinUserRegisterResponse) error {
	return h.UserServiceHandler.Register(ctx, in, out)
}

func (h *userServiceHandler) UserInfo(ctx context.Context, in *DouyinUserRequest, out *DouyinUserResponse) error {
	return h.UserServiceHandler.UserInfo(ctx, in, out)
}

func (h *userServiceHandler) UpdateFollowCount(ctx context.Context, in *DouyinUpdateFollowCountRequest, out *DouyinUpdateFollowCountResponse) error {
	return h.UserServiceHandler.UpdateFollowCount(ctx, in, out)
}

func (h *userServiceHandler) UpdateFollowerCount(ctx context.Context, in *DouyinUpdateFollowerCountRequest, out *DouyinUpdateFollowerCountResponse) error {
	return h.UserServiceHandler.UpdateFollowerCount(ctx, in, out)
}

func (h *userServiceHandler) UpdateTotalFavorited(ctx context.Context, in *DouyinUpdateTotalFavoritedRequest, out *DouyinUpdateTotalFavoritedResponse) error {
	return h.UserServiceHandler.UpdateTotalFavorited(ctx, in, out)
}

func (h *userServiceHandler) UpdateFavoriteCount(ctx context.Context, in *DouyinUpdateFavoriteCountRequest, out *DouyinUpdateFavoriteCountResponse) error {
	return h.UserServiceHandler.UpdateFavoriteCount(ctx, in, out)
}

func (h *userServiceHandler) UpdateWorkCount(ctx context.Context, in *DouyinUpdateWorkCountRequest, out *DouyinUpdateWorkCountResponse) error {
	return h.UserServiceHandler.UpdateWorkCount(ctx, in, out)
}

func (h *userServiceHandler) MultiUserInfo(ctx context.Context, in *DouyinMultiUserInfoRequest, out *DouyinMultiUserInfoResponse) error {
	return h.UserServiceHandler.MultiUserInfo(ctx, in, out)
}
